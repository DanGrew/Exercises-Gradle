/*
 * PLUGINS: apply all plugins needed for the build
 */
plugins {
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'application'
}

/*
 * VERSIONING: describe build and calculate build number
 */
description = """Exercises - Gradle"""
group = 'dangrew.uk'

def buildNumberFromEnvironment = System.getenv()['VERSION_NUMBER']
def buildNumberForThisEnvironment = (buildNumberFromEnvironment != null ? buildNumberFromEnvironment : 'WORKSPACE')
version = buildNumberForThisEnvironment

/*
 * SOURCE: source specific configuration
 */
compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

javafx {
    version = "11"
    modules = ['javafx.base', 'javafx.controls', 'javafx.media', 'javafx.graphics']
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
//resources are dotted through the folder - arguably against conventions
            srcDir 'src'
            srcDir 'test'
        }
    }
}

/*
 * DEPENDENCIES: define repos for resolving and dependencies to resolve
 */
repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.0.5'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

/*
 * UNIT TESTS: configure reports and scope of tests
 */
test {
    filter {
//test intermingled unit + integ - arguably against conventions
        includeTestsMatching "*Test"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

/*
 * INTEGRATION TESTS: configure reports and scope of tests
 */
task integrationTests(type: Test) {
    filter {
        includeTestsMatching "*IT"
    }

    testLogging.events = test.testLogging.events
    reports.junitXml.enabled = test.reports.junitXml.enabled
    reports.html.enabled = test.reports.html.enabled
}
check.dependsOn integrationTests

/*
 * TEST PACKAGING: packaging tests
 */
task packageTests(type: Jar) {
    from sourceSets.test.output
    classifier = 'tests'
}
artifacts.archives packageTests


